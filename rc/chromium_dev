#!/usr/bin/env zsh

# Chromium / ChromiumOS development helpers
#
# Recommended quality of life things in .localrc
#
#     export BOARD=<DUT_BOARD_NAME>
#     export DUT_IP=<DUT_DIRECT_CONNECT_IP>

# AutoNinja for Chromium
#
# Abbreviated from: AutoNinja + Lacros + eXecute + Xvfb
#
# Quick reference (need the following aliases):
#   anx chrome --extra-options : Compile and run Chrome with --extra-options
#   anlx chrome --extra-options : Compile Ash and Lacros chrome, run Ash chrome with lacros support and --extra-options
#   anxx browsertest: Compile and run browsertest in the background
#   anlxx browsertest: Compile and run lacros browsertest with default test runner in the background
an() {
  local OPTIND
  local run=0
  local xvfb=0
  local lacros=0
  while getopts "xXl" o; do
    case "$o" in
      x) run=1;;
      X) xvfb=1;;
      l) lacros=1;;
      ?) echo >&2 "Usage: an [-xXl] <target> [opts]"; return 1;;
   esac
  done

  if [ $# -lt $OPTIND ]; then
    echo >&2 "Invalid usage: missing <target>"
    echo >&2 ""
    echo >&2 "Usage: an [-xXl] <target> [opts]"
    echo >&2 "  Abbreviated from: AutoNinja [eXecute] [Lacros] [Xvfb]"
    return 1
  fi

  local default_build="out/Debug"
  local build_dir="${default_build}"
  if [ $lacros -eq 1 ]; then
    build_dir="out/lacros"
  fi

  shift $((OPTIND - 1))
  local target="$1"
  shift

  ninja -j 2048 -C $build_dir $target || return 1
  if [[ $target == "chrome" && $lacros == 1 ]]; then
    # Also build ash chrome if we are building lacros chrome.
    ninja -j 2048 -C $default_build $target || return 1
  fi

  if [ $run -eq 1 ]; then
    if [[ $target == *"test"* ]]; then
      # Run test. Prepend lacros wrapper is necessary.
      local maybe_lacros_wrapper=" "
      if [ $lacros -eq 1 ]; then
        # determine lacros launch helper.
        # it is later expanded with $( echo $wrapper ) to spread the args.
        maybe_lacros_wrapper="./build/lacros/test_runner.py test"
      fi

      if [ $xvfb -eq 1 ]; then
        # wrap with xvfb so we don't show window on real displays
        ./testing/xvfb.py $( echo $maybe_lacros_wrapper ) ${build_dir}/${target} $@
      else
        # run on active display, and allow human intervention
        $( echo $maybe_lacros_wrapper ) ${build_dir}/${target} $@ \
            --enable-pixel-output-in-tests \
            --ui-test-action-max-timeout=1000000 \
            --test-launcher-timeout=1000000
      fi
    else
      # Prepend useful args.
      local clever_args="--use-system-clipboard "
      if [[ $target == "chrome" ]]; then
        # Clever screen resolution.
        if [[ $DISPLAY == ":20" ]]; then
          # For CRD, guess remote display's resolution.
          local screen_wh=$( xrandr --current 2>&1 | grep -oP '(?<=current )\d+ x \d+' )
          if [[ "$screen_wh" == "" ]] ; then        # Unable to detect display
            echo "Can't detect current display, abort." >&2
            return 1
          fi

          # Reset CRD resolution if it looks like MBP HiDPI.
          local screen_w=$( echo $screen_wh | grep -oP -m1 '\d+' | head -n1 )
          local screen_h=$( echo $screen_wh | grep -oP '(<= x )\d+')

          if   [[ "$screen_w" -lt 1681 ]] ; then
            # MacOS 15" HiDPI scaled, as we don't have smaller screens
            # Reset to MBP'a native resolution. CRD will keep using it until window resize.
            # 2880x1720 has to be defined in CRD default resolutions.
            xrandr -s 2880x1720
            screen_w=2880
            screen_h=1720
          fi

          if   [[ "$screen_w" -lt 2561 ]] ; then
            echo "Likely scaled 4K HiDPI." >&2
            # 4K monitor macOS scaled HiDPI.
            # Also works for corp Z27 monitor, effectively renders at 4K then scale down.
            # 3840x2000 has to be defined.
            xrandr -s 3840x2000
            screen_w=3840
            screen_h=2000
          fi

          if   [[ "$screen_w" == "2880" ]] ; then   # Corp Macbook Pro 15" 2018
            clever_args="$clever_args --force-device-scale-factor=2 --ash-host-window-bounds=2880x1700\*2 "
          elif [[ "$screen_w" == "3840" ]] ; then   # Home 4K monitor
            clever_args="$clever_args --force-device-scale-factor=2 --ash-host-window-bounds=3840x2000\*2 "
          else                                 # Unconfigured monitor
            echo "Current display resolution isn't configured (horizontal = ${screen_w} px), using defaults." >&2
            clever_args="$clever_args --force-device-scale-factor=1 --ash-host-window-bounds=1280x720\*1 "
          fi
        else
          # Local session. Assuming corp 27" dual-monitor setup.
          clever_args="$clever_args --force-device-scale-factor=1.3 --ash-host-window-bounds=2560x1360\*1.3 "
        fi
      fi
      echo "Clever args = $clever_args" >&2

      if [[ $lacros == 1 ]]; then
        # Run lacros non-test target.
        if [[ $target != "chrome" ]]; then
          echo "warning: non-chrome, non-test lacros target not supported."
        fi
        local xdg_dir="../ash_chrome_xdg_runtime"
        local ash_profile="../profiles/ash"
        mkdir -p ${xdg_dir}
        ${default_build}/chrome \
            --user-data-dir=$ash_profile \
            --enable-wayland-server \
            --no-startup-window \
            --enable-features=LacrosSupport \
            --lacros-chrome-path=$build_dir \
            $@
      else
        # Run non-lacros target.
        ${build_dir}/${target} $( echo $clever_args ) $@
      fi
    fi
  fi
}

alias anx="an -x"
alias anxx="an -x -X"
alias anl="an -l"
alias anlx="an -l -x"
alias anlxx="an -l -x -X"


# Compile and Deploy ChRome to Chrome OS device (shell-less flow).
#  - `cros_board` gclient variable must be set.
#  - BOARD env variable must be set.
# For code-server setup, prepend BOARD=<board> to the command line.
dcr() {
  if [[ -z "${BOARD}" ]] ; then
    echo >&2 "BOARD env variable is not set."
    return 1
  fi

  if [ $# -lt 1 ]; then
    echo >&2 "Usage: dcr <device> [opts]"
    echo >&2 "  Abbreviated from: Deploy ChRome"
    return 1
  fi

  local device="$1"
  shift 1

  # TODO: Add a lacros (or ash+lacros) variant 

  cros chrome-sdk --no-shell --log-level=info --nostart-goma --chrome-branding --board=${BOARD}
  grep -qF 'use_goma' out_${BOARD}/Release/args.gn || echo 'use_goma = true' >> out_${BOARD}/Release/args.gn
  grep -qF 'dcheck_always_on' out_${BOARD}/Release/args.gn || echo 'dcheck_always_on = true' >> out_${BOARD}/Release/args.gn
  gn gen -C out_${BOARD}/Release
  ninja -j 2048 -C out_$BOARD/Release chrome || return 1
  ./third_party/chromite/bin/deploy_chrome --build-dir=out_$BOARD/Release --device=$device --board=$BOARD $@
}

# Workaround for https://crbug.com/1345490
alias gn="gn --script-executable=vpython3"